{"name": "Register valid account - PP(Privacy policy) False (N)", "status": "skipped", "statusDetails": {"message": "XFAIL EXPECTED LOGIN FAILURE\n\nTypeError: 'NoneType' object is not iterable", "trace": "driver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"d1ab1106-2987-425e-9d8a-5c284c0b434c\")>\n\n    @allure.epic('Test Registration')\n    @allure.id(23)\n    @allure.title('Register valid account - PP(Privacy policy) False (N)')\n    @allure.description('Registering a valid account without accepting the privacy policy should show an alert')\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.xfail(condition=lambda: True, reason='EXPECTED LOGIN FAILURE')\n    def test_signup_valid_phone_no_privacy(driver):\n        signup = Rp.SignupPage(driver)\n        with allure.step('Creating valid account with no privacy policy'):\n>           signup.sign_up(True, True, True, True, False, True, False)\n\nTest_Registration.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nProject_folder\\pages\\Registration_pages.py:87: in sign_up\n    login_code = Commons.insert_security_code(self, phone_number, False)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Project_folder.pages.Registration_pages.SignupPage object at 0x000001A771A16BD0>, phone_number = '0576171128', false_flag = False\n\n    def insert_security_code(self, phone_number, false_flag):\n        self.wait_for(Commons.SUBMIT_CONFIRMATION)\n        requests = R.MongoRequests()\n        login_code = requests.find_login_code(phone_number)\n        signup_list = [\n            Commons.FIRST_NUMBER,\n            Commons.SECOND_NUMBER,\n            Commons.THIRD_NUMBER,\n            Commons.FOURTH_NUMBER,\n            Commons.FIFTH_NUMBER\n        ]\n        list_count = 0\n        if false_flag:\n            for f in '00000':\n                self.insert(signup_list[list_count], f)\n                list_count += 1\n        else:\n>           for i in login_code:\nE           TypeError: 'NoneType' object is not iterable\n\nProject_folder\\pages\\common_page.py:119: TypeError"}, "description": "Registering a valid account without accepting the privacy policy should show an alert", "steps": [{"name": "Creating valid account with no privacy policy", "status": "broken", "statusDetails": {"message": "TypeError: 'NoneType' object is not iterable\n", "trace": "  File \"C:\\Users\\liad\\Documents\\GitHub\\Trado-Testing-project\\Test_Registration.py\", line 92, in test_signup_valid_phone_no_privacy\n    signup.sign_up(True, True, True, True, False, True, False)\n  File \"C:\\Users\\liad\\Documents\\GitHub\\Trado-Testing-project\\Project_folder\\pages\\Registration_pages.py\", line 87, in sign_up\n    login_code = Commons.insert_security_code(self, phone_number, False)\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\liad\\Documents\\GitHub\\Trado-Testing-project\\Project_folder\\pages\\common_page.py\", line 119, in insert_security_code\n    for i in login_code:\n"}, "start": 1680022570119, "stop": 1680022572375}], "start": 1680022570119, "stop": 1680022572377, "uuid": "8469a201-5196-4ddb-9c77-3df2bad72f83", "historyId": "ecd0abb41d2716d212102beed5049e2f", "testCaseId": "f0b3934029292d4f7cc660a5bbadf99d", "fullName": "Test_Registration#test_signup_valid_phone_no_privacy", "labels": [{"name": "as_id", "value": 23}, {"name": "epic", "value": "Test Registration"}, {"name": "severity", "value": "critical"}, {"name": "tag", "value": "@pytest.mark.xfail(condition=<function <lambda> at 0x000001A7718C6C00>, reason='EXPECTED LOGIN FAILURE')"}, {"name": "suite", "value": "Test_Registration"}, {"name": "host", "value": "TWEEJ5"}, {"name": "thread", "value": "18924-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_Registration"}]}